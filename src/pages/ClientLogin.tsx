import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Icon from "@/components/ui/icon";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";

const ClientLogin = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [credentials, setCredentials] = useState({
    phone: "",
    code: ""
  });
  const [step, setStep] = useState<'phone' | 'code'>('phone');
  const [isLoading, setIsLoading] = useState(false);
  const [sentCode, setSentCode] = useState<string>("");
  const [codeExpiry, setCodeExpiry] = useState<number>(0);

  // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const demoClients = [
    {
      id: "1",
      name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      phone: "+7 (999) 123-45-67",
      code: "1234",
      psychologist: "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
      nextSession: "2025-08-16 10:00"
    },
    {
      id: "2", 
      name: "–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤",
      phone: "+7 (999) 987-65-43",
      code: "5678",
      psychologist: "–î–º–∏—Ç—Ä–∏–π –ü–µ—Ç—Ä–æ–≤",
      nextSession: "2025-08-16 14:00"
    }
  ];

  const formatPhone = (value: string) => {
    let digits = value.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (digits.startsWith('8')) {
      digits = '7' + digits.slice(1);
    }
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–æ–π —Ü–∏—Ñ—Ä—ã (9), –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
    if (!digits.startsWith('7') && digits.length > 0) {
      digits = '7' + digits;
    }
    
    if (digits.length === 0) return '';
    if (digits.length <= 1) return `+${digits}`;
    if (digits.length <= 4) return `+${digits.slice(0, 1)} (${digits.slice(1)}`;
    if (digits.length <= 7) return `+${digits.slice(0, 1)} (${digits.slice(1, 4)}) ${digits.slice(4)}`;
    if (digits.length <= 9) return `+${digits.slice(0, 1)} (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;
    return `+${digits.slice(0, 1)} (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7, 9)}-${digits.slice(9, 11)}`;
  };

  const generateSMSCode = () => {
    return Math.floor(1000 + Math.random() * 9000).toString();
  };

  const sendSMSCode = async (phone: string, code: string) => {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SMS —Å–µ—Ä–≤–∏—Å
      const { smsService } = await import('@/api/sms');
      
      const result = await smsService.sendSMS({
        phone: `+${phone}`,
        message: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`
      });

      if (!result.success) {
        throw new Error(result.error || 'SMS sending failed');
      }

      return result;
    } catch (error) {
      console.error('SMS sending failed:', error);
      // –í –∫–∞—á–µ—Å—Ç–≤–µ fallback –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log(`üì± SMS CODE for +${phone}: ${code}`);
      throw error;
    }
  };

  const handlePhoneSubmit = async () => {
    setIsLoading(true);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const cleanPhone = credentials.phone.replace(/\D/g, '');
      const manualRecords = JSON.parse(localStorage.getItem('manualRecords') || '[]');
      const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
      
      const hasManualRecords = manualRecords.some((record: any) => {
        if (!record.clientPhone) return false;
        const recordPhone = record.clientPhone.replace(/\D/g, '');
        const normalizedRecordPhone = recordPhone.startsWith('8') ? '7' + recordPhone.slice(1) : recordPhone;
        const normalizedCleanPhone = cleanPhone.startsWith('8') ? '7' + cleanPhone.slice(1) : cleanPhone;
        return normalizedRecordPhone === normalizedCleanPhone;
      });
      
      const hasBookings = bookings.some((booking: any) => {
        if (!booking.clientPhone) return false;
        const bookingPhone = booking.clientPhone.replace(/\D/g, '');
        const normalizedBookingPhone = bookingPhone.startsWith('8') ? '7' + bookingPhone.slice(1) : bookingPhone;
        const normalizedCleanPhone = cleanPhone.startsWith('8') ? '7' + cleanPhone.slice(1) : cleanPhone;
        return normalizedBookingPhone === normalizedCleanPhone;
      });
      
      if (hasManualRecords || hasBookings) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        const code = generateSMSCode();
        const expiryTime = Date.now() + 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        setSentCode(code);
        setCodeExpiry(expiryTime);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        await sendSMSCode(cleanPhone, code);
        
        setStep('code');
        toast({
          title: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
          description: `SMS —Å –∫–æ–¥–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${credentials.phone}`
        });
      } else {
        toast({
          title: "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
          description: "–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ —Å–µ—Å—Å–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.",
          variant: "destructive"
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCodeSubmit = () => {
    setIsLoading(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const isCodeValid = credentials.code === sentCode;
    const isCodeExpired = Date.now() > codeExpiry;
    
    setTimeout(() => {
      setIsLoading(false);
      
      if (isCodeExpired) {
        toast({
          title: "–ö–æ–¥ –∏—Å—Ç—ë–∫",
          description: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.",
          variant: "destructive"
        });
        setStep('phone');
        setSentCode("");
        setCodeExpiry(0);
      } else if (isCodeValid) {
        const cleanPhone = credentials.phone.replace(/\D/g, '');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        localStorage.setItem('clientSession', JSON.stringify({
          phone: cleanPhone,
          timestamp: Date.now()
        }));
        
        // –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        setSentCode("");
        setCodeExpiry(0);
        
        toast({
          title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
          description: "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
        });
        
        navigate("/client");
      } else {
        toast({
          title: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥",
          description: "–í–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS.",
          variant: "destructive"
        });
      }
    }, 1000);
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhone(e.target.value);
    setCredentials({ ...credentials, phone: formatted });
  };

  return (
    <div className="min-h-screen bg-warm-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-warm-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Icon name="User" size={32} className="text-warm-600" />
          </div>
          <h1 className="text-2xl font-bold text-warm-800 mb-2">–í—Ö–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤</h1>
          <p className="text-warm-600">
            {step === 'phone' 
              ? '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
              : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
            }
          </p>
        </div>

        <Card className="border-warm-200">
          <CardHeader>
            <CardTitle className="text-center text-warm-800">
              {step === 'phone' ? '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' : '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {step === 'phone' ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Label>
                  <Input
                    id="phone"
                    type="tel"
                    value={credentials.phone}
                    onChange={handlePhoneChange}
                    placeholder="+7 (999) 123-45-67"
                    className="border-warm-300 focus:border-warm-500"
                    maxLength={18}
                  />
                </div>
                
                <Button 
                  onClick={handlePhoneSubmit}
                  disabled={credentials.phone.replace(/\D/g, '').length < 11 || isLoading}
                  className="w-full bg-warm-600 hover:bg-warm-700"
                >
                  {isLoading ? (
                    <>
                      <Icon name="Loader2" className="mr-2 animate-spin" size={16} />
                      –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...
                    </>
                  ) : (
                    <>
                      <Icon name="MessageSquare" className="mr-2" size={16} />
                      –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥
                    </>
                  )}
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="code">–ö–æ–¥ –∏–∑ SMS</Label>
                  <Input
                    id="code"
                    type="text"
                    value={credentials.code}
                    onChange={(e) => setCredentials({ ...credentials, code: e.target.value })}
                    placeholder="0000"
                    className="border-warm-300 focus:border-warm-500 text-center text-xl tracking-wider"
                    maxLength={4}
                  />
                </div>
                
                <Button 
                  onClick={handleCodeSubmit}
                  disabled={credentials.code.length < 4 || isLoading}
                  className="w-full bg-warm-600 hover:bg-warm-700"
                >
                  {isLoading ? (
                    <>
                      <Icon name="Loader2" className="mr-2 animate-spin" size={16} />
                      –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                    </>
                  ) : (
                    <>
                      <Icon name="LogIn" className="mr-2" size={16} />
                      –í–æ–π—Ç–∏
                    </>
                  )}
                </Button>
                
                <Button 
                  variant="outline"
                  onClick={() => setStep('phone')}
                  className="w-full text-warm-600 border-warm-300"
                >
                  <Icon name="ArrowLeft" className="mr-2" size={16} />
                  –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
                </Button>
              </div>
            )}
          </CardContent>
        </Card>



        {/* Back to main */}
        <div className="mt-6 text-center">
          <Button 
            variant="ghost"
            onClick={() => navigate('/')}
            className="text-warm-600 hover:bg-warm-100"
          >
            <Icon name="ArrowLeft" className="mr-2" size={16} />
            –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ClientLogin;