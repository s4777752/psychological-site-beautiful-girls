// SMS Service —Å –æ–±—Ö–æ–¥–æ–º CORS —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏

interface SMSResponse {
  success: boolean;
  messageId?: string;
  error?: string;
}

export class SMSService {
  private static instance: SMSService;
  
  static getInstance(): SMSService {
    if (!SMSService.instance) {
      SMSService.instance = new SMSService();
    }
    return SMSService.instance;
  }

  async sendSMS(phone: string, code: string): Promise<SMSResponse> {
    const SMS_RU_API_KEY = import.meta.env.VITE_SMS_RU_API_KEY;
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π SMS API —Å–µ—Ä–≤–∏—Å (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ CORS)
    if (SMS_RU_API_KEY) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        const proxyUrl = 'https://api.allorigins.win/raw?url=';
        const smsUrl = `https://sms.ru/sms/send?api_id=${SMS_RU_API_KEY}&to=${phone}&msg=${encodeURIComponent(`–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`)}&json=1`;
        
        const response = await fetch(proxyUrl + encodeURIComponent(smsUrl));
        const result = await response.json();
        
        if (result.status === 'OK') {
          console.log(`‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ SMS.ru –Ω–∞ +${phone}`);
          return {
            success: true,
            messageId: result.sms?.message_id
          };
        } else {
          throw new Error(result.status_text || 'SMS –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ SMS.ru:', error);
      }
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 2: –≠–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ WebHook
    try {
      const webhookUrl = 'https://webhook.site/unique-id'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à webhook
      
      await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone: phone,
          code: code,
          message: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
          timestamp: new Date().toISOString()
        })
      });
      
      console.log(`üì§ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webhook –¥–ª—è +${phone}: ${code}`);
      return { success: true, messageId: 'webhook' };
    } catch (webhookError) {
      console.error('Webhook –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', webhookError);
    }

    // –í–∞—Ä–∏–∞–Ω—Ç 3: –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if ('Notification' in window) {
      try {
        const permission = await Notification.requestPermission();
        if (permission === 'granted') {
          new Notification('SMS –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω', {
            body: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
            icon: '/favicon.ico'
          });
          console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è +${phone}: ${code}`);
        }
      } catch (notificationError) {
        console.error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', notificationError);
      }
    }

    // Fallback: –ø–æ–∫–∞–∑ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ alert
    console.log(`üì± SMS CODE –¥–ª—è +${phone}: ${code}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å –∫–æ–¥–æ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setTimeout(() => {
      alert(`üì± SMS –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${code}\n\n(–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∫–æ–¥ –ø—Ä–∏–¥—ë—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω)`);
    }, 1000);

    return { success: true, messageId: 'fallback' };
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ SMS
  async getSMSStatus(messageId: string): Promise<{ status: string }> {
    const SMS_RU_API_KEY = import.meta.env.VITE_SMS_RU_API_KEY;
    
    if (!SMS_RU_API_KEY || messageId === 'demo' || messageId === 'webhook' || messageId === 'fallback') {
      return { status: 'delivered' };
    }

    try {
      const response = await fetch(`https://sms.ru/sms/status?api_id=${SMS_RU_API_KEY}&sms_id=${messageId}&json=1`);
      const result = await response.json();
      return { status: result.status || 'unknown' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ SMS:', error);
      return { status: 'unknown' };
    }
  }
}

export const smsService = SMSService.getInstance();